#!/usr/bin/env perl

use strict;
use warnings;
use Carp;
use MIME::Base64;
use Text::Iconv;

sub charconv
{
  my ($from, $text) = @_;
  my $converter = Text::Iconv->new($from, "UTF-8");
  return $converter->convert($text);
};

sub get_headers
{
  my ($fh) = @_;

  my $headers = {};

  my $decodeQ = sub {
    my ($content) = @_;

    $content =~ s{_}{ }xmsg;
    $content =~ s{( (?:= [a-fA-F0-9]{2})+ ) }{pack("H*", $1 =~ s{=}{}xmsgr)}xmseg;

    return $content;
  };

  my $decodeB = sub {
    my ($content) = @_;
    return decode_base64($content);
  };

  while (<$fh>) {
    # body ...
    last if m{ ^ $ }xms;

    # headers ...
    chomp;
    if (m{ ^ (\w+) : \s* (.*) }xms) {
      my $name = $1;
      my $content = $2;
      while (<$fh>) {
        chomp;
        last unless m{ ^ \s+ (.*) }xms;
        $content .= $1;
      }
      $content =~ s{=\?(.*?)\?Q\? (.*?) \?=}{charconv($1, $decodeQ->($2))}xmsegi;
      $content =~ s{=\?(.*?)\?B\? (.*?) \?=}{charconv($1, $decodeB->($2))}xmsegi;
      $headers->{$name} = $content;
      redo;
    }
  }

  return $headers;
}

for my $file (glob("~/mail/new/*")) {

  open(my $fh, "<", $file) or croak("Failed to open '$file' for reading");
  my $headers = get_headers($fh);
  close($fh) or croak("Failed to close '$file' after reading");

  printf("%s\n", $headers->{Subject});
  printf(" | From: %s\n", $headers->{From});
  printf(" | Subject: %s\n", $headers->{Subject});
  printf(" | To: %s\n", $headers->{To});
  printf(" | File: %s\n", $file);
  printf("\n");
}
