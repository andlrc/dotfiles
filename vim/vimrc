" vim: fdm=marker
" Author Andreas Louv <andreas@louv.dk>

" Options {{{1

filetype plugin indent on
syntax enable
set synmaxcol=200

set history=1000
set hidden
set visualbell belloff=wildmode
set backspace=indent,eol,start
set nrformats-=octal

set undofile undodir=~/.vim/tmp/undo//
set dir=~/.vim/tmp/swap//

set listchars+=tab:\|\ 

augroup ColorChg
  au!
  au ColorScheme nofrils-dark hi ibTplString term=italic cterm=italic gui=italic
augroup END
let g:nofrils_heavylinenumbers = 1
colorscheme nofrils-dark

" Leader {{{1

let mapleader = "\<Space>"
let maplocalleader = "\\"

" Searching, Navigating and Compiling Files {{{1

" Update / Write and make
command! -bang Make :exe (<bang>0 ? ':write' : ':update') . ' | :make'

setglobal ignorecase smartcase hlsearch incsearch
setglobal path^=**
setglobal grepprg=grep\ -nH\ --exclude='*.o'\ --exclude='*.tags'
                     \\ --exclude='tags'\ --exclude-dir=node_modules
                     \\ --exclude-dir=.git\ $*

nnoremap gb :ls<cr>:b<space>
nnoremap g/ :g//#<left><left>

" Prompt And Exec Function {{{2

function! s:PromptAndExec(cmd) abort
  let ans = input('Type number and <Enter> (empty cancels): ')

  if ans !~# '^\s*$'
    try
      silent execute 'normal! ' . printf(a:cmd, ans)
    catch /E387/ "E387: Match is on current line
    endtry
  endif
endfunction

" Faster define and include {{{2

nnoremap [I [I:call <SID>PromptAndExec(":ijump! %d \022\027\015")<CR>
nnoremap ]I ]I:call <SID>PromptAndExec(":+1,$ijump! %d \022\027\015")<CR>

nnoremap [D [D:call <SID>PromptAndExec(":djump %d \022\027\015")<CR>
nnoremap ]D ]D:call <SID>PromptAndExec(":+1,$djump %d \022\027\015")<CR>

" Enhanced % {{{2

packadd! matchit

" Spelling {{{1

set spellfile=~/.vim/spell.utf-8.add

" zg will add <cword> to the custom spell file, sort that file after adding
nnoremap zg zg:silent ! sort ~/.vim/spell.utf-8.add -o
                           \ ~/.vim/spell.utf-8.add<cr>:redraw!<cr>

" Completion {{{1

set wildmenu
set wildmode=longest,full
set wildignorecase
set suffixes^=,			" Files without extension
set suffixes-=.h
set completeopt-=preview

" Wrapping {{{1

" Why can't I set "nowrap" nor "textwidth" with "setglobal",
" "/usr/share/vim/vimfiles/archlinux.vim" doesn't set them.
set nowrap
set textwidth=80
set formatoptions+=jo
set formatoptions-=t

" Abbreviations {{{1

inorea <al@ <andreas@louv.dk
inorea al@ andreas@louv.dk

" Convenience mappings {{{1

nnoremap <silent> <C-l> :noh<cr>:call clearmatches()<cr><C-l>

nnoremap <silent> <leader>cc
      \ :let &l:colorcolumn = &l:colorcolumn == '' ? '+0' : ''<CR>

nnoremap <silent> <leader>ss
      \ :echo synIDattr(synID(line('.'), col('.'), 0), 'name')<CR>

nnoremap <silent> <leader>ww
      \ mz:keepp %s/\\\@<!\s\+$//e<cr>`z

" Folding {{{1

setglobal foldopen-=block
" Automatic set foldmethod to manual when entering insert mode, this is done
" to prevent vim from unfolding automatic folds, when the code changes.
augroup LazyFolds
  autocmd!
  autocmd InsertEnter,WinLeave * :call <SID>LazyFolds(1)
  autocmd InsertLeave,WinEnter * :call <SID>LazyFolds(0)
augroup END

function! s:LazyFolds(enter) abort
  if a:enter
    let &l:foldmethod = get(b:, 'lazy_foldmethod', &foldmethod)
  else
    let b:lazy_foldmethod=&foldmethod
    setlocal foldmethod=manual
  endif
endfunction

" FileType Detect {{{1

augroup FT_Detect
  autocmd!
  autocmd BufNewFile,BufRead *.widget setlocal filetype=javascript.widget
  autocmd BufNewFile,BufRead *.{xjson,xpd,ns,dmd,lib} setlocal filetype=json
  autocmd BufNewFile,BufRead *.tpl setlocal filetype=html
  autocmd BufNewFile,BufRead *.as[pm]x setlocal filetype=rpgle
  autocmd BufNewFile,BufRead *.qdmd setlocal filetype=qdmd
augroup END

" UndotreeToggle {{{1

let g:undotree_SetFocusWhenToggle = 1
